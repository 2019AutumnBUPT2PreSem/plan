#include<stdio.h>
#include<stdlib.h>
#define db int
db* constructD1(int n,db init);
db** constructD2(int m, int n,db init);

void destroyD1(db *p);
void destroyD2(db **p, int m);

int main()
{
    int m, n;
    scanf("%d%d", &m, &n);
    db init,i,j;
    int **p = constructD2(m, n, init);
    if(p == NULL)
    {
		printf(" A.\n");
		return 1;
    }
   	for(i = 0; i < m; i++)
		{
			for(j = 0; j < n; j++)
				scanf("%d",&p[i][j]);		
		}
	for(i = 0; i < m; i++)
		{
			for(j = 0; j < n; j++)
				printf("%d",p[i][j]);		
		}
	destroyD2(p, m);
	
	return 0;
    
}
db** constructD2(int m, int n, db init)
{
    db **p = (db**)malloc(sizeof(db*) * m);
    int i,j;
	if(p == NULL)
		printf("Memory overflow while locating 2 dimension array");
    else
    {
		for(i = 0; i < m; i++)
		{
	    	p[i] = constructD1(n, init);
	    	if(p[i] == NULL)
	    	{
				printf(", row %d of 2 dimension array", i);
				destroyD2(p, i);
				return NULL;
	    	}
		}
		for(i = 0; i < m; i++)
		{
			for(j = 0; j < n; j++)
				p[i][j] = init;		
		}
	}
    return p;
}

db* constructD1(int n, db init)
{
    db *p = (db*)malloc(sizeof(db) * n);
    if(p == NULL)
	printf("Memory overflow while locating 1 dimension array");
	else
	{
		for(int i = 0; i < n; i++)
		p[i] = init;
	}
    return p;
}

void destroyD1(db *p)
{
    free(p);
}

void destroyD2(db **p, int m)
{
    for(int i = 0; i < m; i++)
		destroyD1(p[i]);
    free(p);
}
